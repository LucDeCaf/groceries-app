/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')();
const RegisterIndexLazyImport = createFileRoute('/register/')();
const LoginIndexLazyImport = createFileRoute('/login/')();

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route));

const RegisterIndexLazyRoute = RegisterIndexLazyImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/register/index.lazy').then((d) => d.Route),
);

const LoginIndexLazyRoute = LoginIndexLazyImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/index.lazy').then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/login/': {
      id: '/login/';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
    '/register/': {
      id: '/register/';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterIndexLazyImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute;
  '/login': typeof LoginIndexLazyRoute;
  '/register': typeof RegisterIndexLazyRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute;
  '/login': typeof LoginIndexLazyRoute;
  '/register': typeof RegisterIndexLazyRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexLazyRoute;
  '/login/': typeof LoginIndexLazyRoute;
  '/register/': typeof RegisterIndexLazyRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '/login' | '/register';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '/login' | '/register';
  id: '__root__' | '/' | '/login/' | '/register/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute;
  LoginIndexLazyRoute: typeof LoginIndexLazyRoute;
  RegisterIndexLazyRoute: typeof RegisterIndexLazyRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LoginIndexLazyRoute: LoginIndexLazyRoute,
  RegisterIndexLazyRoute: RegisterIndexLazyRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login/",
        "/register/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/login/": {
      "filePath": "login/index.lazy.tsx"
    },
    "/register/": {
      "filePath": "register/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
